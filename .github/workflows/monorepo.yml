name: Monorepo

on:
  repository_dispatch:
    types: trigger-release

jobs:

  ci:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-versions: '7.3'

    env:
      cache_version: 0 # increment to flush all caches
      php_version: '7.3'
      php_extensions: memcached, mysql, bz2, gd, igbinary, imagick, imap, mbstring, bcmath, zip, intl
      GITHUB_AUTH_TOKEN: '' # avoid fatal error when booting monorepo-builder

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP extension cache
        id: cache-php-extensions
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ env.php_version }}
          extensions: ${{ env.php_extensions }}
          key: ${{ matrix.operating-system }}-${{ env.cache_version }}-phpextensions-${{ env.php_version }}

      - name: Cache PHP extensions
        uses: actions/cache@v1
        with:
          path: ${{ steps.cache-php-extensions.outputs.dir }}
          key: ${{ steps.cache-php-extensions.outputs.key }}
          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.php_version }}
          extensions: ${{ env.php_extensions }}
          coverage: none
          tools: codeception, composer

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Check for Cached Composer Dependencies
        id: cache-composer-dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ env.cache_version }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-${{ env.cache_version }}-composer-

      - name: Install composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader

      - name: Show triggered event data
        run: 'echo "Version: ${{ github.event.client_payload.version }}"'
